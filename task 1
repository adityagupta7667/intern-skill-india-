import cv2
import numpy as np
from collections import Counter

def get_dominant_colors(image_path, num_colors=5):
    # Load the image using OpenCV
    image = cv2.imread(image_path)
    
    # Convert the image from BGR to RGB
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Reshape the image to be a list of pixels
    pixels = image_rgb.reshape(-1, 3)
    
    # Calculate the dominant colors using k-means clustering
    k = num_colors
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, 0.2)
    _, labels, centers = cv2.kmeans(np.float32(pixels), k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    
    # Convert the color centers to integers
    dominant_colors = [tuple(map(int, center)) for center in centers]
    
    # Count the number of pixels assigned to each cluster
    color_counts = Counter(labels.flatten())
    
    # Sort the colors by frequency
    sorted_colors = [dominant_colors[i] for i, _ in color_counts.most_common(num_colors)]
    
    return sorted_colors

if __name__ == "__main__":
    image_path = "path/to/your/image.jpg"
    num_colors = 5  # You can change this to the number of dominant colors you want to detect
    
    dominant_colors = get_dominant_colors(image_path, num_colors)
    
    print("Dominant Colors:")
    for color in dominant_colors:
        print(color)
